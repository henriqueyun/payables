/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PayableIndexImport } from './routes/payable/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as AssignorIndexImport } from './routes/assignor/index'
import { Route as PayableCreateImport } from './routes/payable/create'
import { Route as PayableUpdateIdImport } from './routes/payable/update.$id'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PayableIndexRoute = PayableIndexImport.update({
  id: '/payable/',
  path: '/payable/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const AssignorIndexRoute = AssignorIndexImport.update({
  id: '/assignor/',
  path: '/assignor/',
  getParentRoute: () => rootRoute,
} as any)

const PayableCreateRoute = PayableCreateImport.update({
  id: '/payable/create',
  path: '/payable/create',
  getParentRoute: () => rootRoute,
} as any)

const PayableUpdateIdRoute = PayableUpdateIdImport.update({
  id: '/payable/update/$id',
  path: '/payable/update/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/payable/create': {
      id: '/payable/create'
      path: '/payable/create'
      fullPath: '/payable/create'
      preLoaderRoute: typeof PayableCreateImport
      parentRoute: typeof rootRoute
    }
    '/assignor/': {
      id: '/assignor/'
      path: '/assignor'
      fullPath: '/assignor'
      preLoaderRoute: typeof AssignorIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/payable/': {
      id: '/payable/'
      path: '/payable'
      fullPath: '/payable'
      preLoaderRoute: typeof PayableIndexImport
      parentRoute: typeof rootRoute
    }
    '/payable/update/$id': {
      id: '/payable/update/$id'
      path: '/payable/update/$id'
      fullPath: '/payable/update/$id'
      preLoaderRoute: typeof PayableUpdateIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/payable/create': typeof PayableCreateRoute
  '/assignor': typeof AssignorIndexRoute
  '/login': typeof LoginIndexRoute
  '/payable': typeof PayableIndexRoute
  '/payable/update/$id': typeof PayableUpdateIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/payable/create': typeof PayableCreateRoute
  '/assignor': typeof AssignorIndexRoute
  '/login': typeof LoginIndexRoute
  '/payable': typeof PayableIndexRoute
  '/payable/update/$id': typeof PayableUpdateIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/payable/create': typeof PayableCreateRoute
  '/assignor/': typeof AssignorIndexRoute
  '/login/': typeof LoginIndexRoute
  '/payable/': typeof PayableIndexRoute
  '/payable/update/$id': typeof PayableUpdateIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/payable/create'
    | '/assignor'
    | '/login'
    | '/payable'
    | '/payable/update/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/payable/create'
    | '/assignor'
    | '/login'
    | '/payable'
    | '/payable/update/$id'
  id:
    | '__root__'
    | '/'
    | '/payable/create'
    | '/assignor/'
    | '/login/'
    | '/payable/'
    | '/payable/update/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  PayableCreateRoute: typeof PayableCreateRoute
  AssignorIndexRoute: typeof AssignorIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  PayableIndexRoute: typeof PayableIndexRoute
  PayableUpdateIdRoute: typeof PayableUpdateIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  PayableCreateRoute: PayableCreateRoute,
  AssignorIndexRoute: AssignorIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  PayableIndexRoute: PayableIndexRoute,
  PayableUpdateIdRoute: PayableUpdateIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/payable/create",
        "/assignor/",
        "/login/",
        "/payable/",
        "/payable/update/$id"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/payable/create": {
      "filePath": "payable/create.tsx"
    },
    "/assignor/": {
      "filePath": "assignor/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/payable/": {
      "filePath": "payable/index.tsx"
    },
    "/payable/update/$id": {
      "filePath": "payable/update.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
